#! /usr/bin/env python

# --- standard library imports
import os
import sys
import argparse
import re

# ############ dev only.  Comment out for production ######################
sys.path.append('../..')
# #########################################################################

from pandashells.lib import module_checker_lib, arg_lib, io_lib

# --- import required dependencies
modulesOkay = module_checker_lib.check_for_modules(['pandas', 'numpy'])
if not modulesOkay:
    sys.exit(1)

import pandas as pd
import numpy as np

# --- this dict holds info on all valid distribution types
TYPE_LIST = [{
    'name': 'uniform',
    'param_list': [
        {'name': 'low', 'val': 0},
        {'name': 'high', 'val': 1}, ]},
    {
    'name': 'normal',
    'param_list': [
        {'name': 'loc', 'val': 0},
        {'name': 'scale', 'val': 1}]},
    {
    'name': 'binomial',
    'param_list': [
        {'name': 'n', 'val': 1},
        {'name': 'p', 'val': .5}]},
    {
    'name': 'beta',
    'param_list': [
        {'name': 'a', 'val': 1},
        {'name': 'b', 'val': 1},
    ],
    },
    {
    'name': 'gamma',
    'param_list': [
        {'name': 'shape', 'val': 1},
        {'name': 'scale', 'val': 1},
    ],
    },
    {
    'name': 'poisson',
    'param_list': [{'name': 'lam', 'val': 1}],
    },
    {
    'name': 'standard_t',
    'param_list': [{'name': 'df', 'val': 1}],
    }]

# =============================================================================
if __name__ == '__main__':
    msg = "Create randomly drawn sample from specified distribution. "
    msg += "See the numpy.random documentation for distribution parameter "
    msg += "descriptions.  Note that the ording of arguments to this tool "
    msg += "is important.  Run with --example for examples."

    # --- read command line arguments
    parser = argparse.ArgumentParser(description=msg)

    options = {}
    arg_lib.addArgs(parser, 'io_out', 'example')
    parser.add_argument("-r", "--recs",
                        help="the number of records to generate",
                        nargs=1, default=[10], type=int)
    parser.add_argument("-c", "--cols",
                        help="the number of columns to generate",
                        nargs=1, default=[1], type=int)

    msg = 'Additional help example: p.rand normal --help'
    subparsers = parser.add_subparsers(dest='dist_name', help=msg)

    # --- add subparsers for each distribution based on TYPE_LIST info
    for t_rec in TYPE_LIST:
        sub_p = subparsers.add_parser(t_rec['name'])
        for p_rec in t_rec['param_list']:
            sub_p.add_argument('--{}'.format(p_rec['name']),
                               default=[p_rec['val']], nargs=1,
                               metavar=str(p_rec['val']), type=float)

    # --- parse arguments
    args = parser.parse_args()

    # --- get the relevant distribution-type record
    t_rec = [r for r in TYPE_LIST if r['name'] == args.dist_name][0]

    # --- create kwargs to pass to probability function
    kwargs = {'size': (args.recs[0], args.cols[0])}
    for p_rec in t_rec['param_list']:
        kwargs[p_rec['name']] = args.__dict__[p_rec['name']][0]

    # --- get the probbility function from numpy.random
    prob_func = np.random.__dict__[args.dist_name]

    col_names = ['c{}'.format(nn) for nn in range(args.cols[0])]
    df = pd.DataFrame(prob_func(**kwargs), columns=col_names)

    # --- write dataframe to output
    io_lib.df_to_output(args, df)
