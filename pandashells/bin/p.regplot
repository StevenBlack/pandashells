#! /usr/bin/env python

# --- standard library imports
import os
import sys
import argparse
import re

# ############ dev only.  Comment out for production ######################
sys.path.append('../..')
# #########################################################################

from pandashells.lib import module_checker_lib, arg_lib, io_lib, plot_lib

# --- import required dependencies
modulesOkay = module_checker_lib.check_for_modules([
    'pandas',
    'numpy',
    'matplotlib',
    'seaborn'])
if not modulesOkay:
    sys.exit(1)

import numpy as np
import pandas as pd
import matplotlib as mpl
import pylab as pl
import seaborn as sns

sns.set_context('talk')
mpl.rcParams['figure.facecolor'] = (.98, .98, .98)
mpl.rcParams['figure.edgecolor'] = (.98, .98, .98)

# =============================================================================
if __name__ == '__main__':
    msg = "Shows a quick single variable regression plot of specified order."

    # --- read command line arguments
    parser = argparse.ArgumentParser(description=msg)

    arg_lib.addArgs(parser, 'io_in', 'io_out', 'example', 'decorating',
                    io_no_col_spec_allowed=True)

    msg = 'Column for dependent variable'
    parser.add_argument('-x', nargs=1, type=str, dest='x', metavar='col',
                        help=msg, required=True)

    msg = 'Column for independent variable'
    parser.add_argument('-y', nargs=1, type=str, dest='y',
                        metavar='col', help=msg, required=True)

    msg = "The order of the polynomial to fit (default = 1)"
    parser.add_argument("--order", help=msg, nargs=1, default=[1], type=int)

    parser.add_argument("-a", "--alpha", help="Set opacity",
                        nargs=1, default=[0.5], type=float)

    # --- parse arguments
    args = parser.parse_args()

    # --- get the input dataframe
    df = io_lib.df_from_input(args)

    # --- extract command line params
    x = df[args.x[0]].values
    y = df[args.y[0]].values

    # --- do a polyfit with the specified order
    coeffs = np.polyfit(x, y, args.order[0])

    label_plain = "y = "
    for nn, coeff in enumerate(coeffs[::-1]):
        if nn > 0:
            label_plain += ' + '
        if nn == 0:
            label_plain += '(%0.4g)' % coeff
        elif nn == 1:
            label_plain += '(%04g) x' % coeff
        else:
            label_plain += '(%0.4g) x ^ %d' % (coeff, nn)
    label_tex = '${}$'.format(label_plain)
    label = label_tex
    if args.savefig:
        if re.compile(r'.*?\.html$').match(args.savefig[0]):
            label = label_plain

    sns.regplot(x, y, order=args.order[0], label=label,
                scatter_kws={'alpha': args.alpha[0]})

    pl.legend(loc='best')
    pl.xlabel(args.x[0])
    pl.ylabel(args.y[0])
    plot_lib.refine_plot(args)
    plot_lib.show(args)
